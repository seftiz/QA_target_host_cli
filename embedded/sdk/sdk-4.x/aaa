diff --git a/embedded/sdk/sdk-4.x/common/link/link.c b/embedded/sdk/sdk-4.x/common/link/link.c
index 37f549d..8c7f38f 100644
--- a/embedded/sdk/sdk-4.x/common/link/link.c
+++ b/embedded/sdk/sdk-4.x/common/link/link.c
@@ -6,15 +6,31 @@
 #include <unistd.h>
 #include <time.h>
 #include <stdlib.h>
+//chrub added:
+#include <inttypes.h>
+#include <stdint.h>
+#include <stddef.h>
+// chrub end
 
 #include "link.h"
 #include "../../linux/remote/remote.h"
 
-v2x_service_t 						*v2x_service = NULL;
 
+/* V2X service */
+v2x_service_t *v2x_service = NULL;
+
+/* Shared V2X socket */
+//static v2x_socket_t *v2x_socket = NULL;
+
+/* Example message format string: Example <seq_num> */
+static const char msg_fmt[] = "Example %u";
+
+/* Example message string maximum length */
+static const size_t msg_size_max = sizeof(msg_fmt) + 10;
+
+
+unsigned int 	m_link_rx_packets = 0, m_link_tx_packets = 0;
 
-unsigned int 	m_link_rx_packets = 0,
-							m_link_tx_packets = 0;
 				
 void print_hexdump(const void *buf, size_t len, int ascii);
 
@@ -48,8 +64,24 @@ int cli_v2x_link_print_cntrs( struct cli_def *cli, const char *command, char *ar
 	return ATLK_OK;
 }
 
+int cli_test_v2x_link_api_test( struct cli_def *cli, const char *command, char *argv[], int argc  )  // chrub
+{
+user_context *myctx = (user_context *) cli_get_context(cli);
+  (void) command;
+  (void) argv;
+  (void) argc;
+
+	cli_print(cli, "shalom");
+	cli_print(cli, "RX : module = %u, session = %u", m_link_rx_packets, myctx->cntrs.link_rx_packets );
+
+	return ATLK_OK;
+}
+
+
+
 int cli_v2x_link_service_create( struct cli_def *cli, const char *command, char *argv[], int argc  ) 
 {
+	
   char                  str_data[256] = "";
 
   (void) command;
@@ -125,6 +157,7 @@ error:
   
 }
 
+
 int cli_v2x_link_socket_create( struct cli_def *cli, const char *command, char *argv[], int argc ) 
 {
 	v2x_socket_config_t	link_sk_params = V2X_SOCKET_CONFIG_INIT;
@@ -221,7 +254,10 @@ int cli_v2x_link_socket_delete( struct cli_def *cli, const char *command, char *
   if ( atlk_error(rc) ) {
     cli_print ( cli, "ERROR : v2x_socket_delete: %d, %s\n", rc, atlk_rc_to_str(rc) );
     goto error;
-  }	
+  }
+	else {
+		cli_print ( cli, "PASS : %u - %s", rc, atlk_rc_to_str(rc) );
+}	
 
  
 error:
@@ -485,3 +521,471 @@ int cli_v2x_set_link_socket_addr( struct cli_def *cli, const char *command, char
   
   return CLI_OK;
 }
+
+
+int cli_test_v2x_link_dot4_channel_start( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+  	(void) command;
+  	(void) argv;
+  	(void) argc;	
+
+	v2x_dot4_channel_start_request_t *request = NULL;
+	atlk_wait_t wait;
+	int i = 0;
+	atlk_rc_t rc = ATLK_OK;
+//	int wait_int = 0;
+
+	request = (v2x_dot4_channel_start_request_t *) malloc(sizeof(v2x_dot4_channel_start_request_t));
+//	wait = (atlk_wait_t *) malloc(sizeof(atlk_wait_t));
+
+	IS_HELP_ARG("link api_test dot4_channel start [-if_index 0-3|inv_data] [-op_class 1|2|3|4|inv_data] [-channel_num 0-255|inv_data] [-time_slot 0|1|2|3|inv_data] [-immediate_access 0-255|inv_data] [-wait_type 0|1] [-wait_usec 0-0xffffffff]");
+
+  	CHECK_NUM_ARGS /* make sure all parameter are there */
+
+
+  	for (i = 0; i < argc; i += 2) {
+    		GET_UINT8("-if_index", request->if_index , i, "V2X physical interface index on which access to channel is requested");
+    		GET_INT("-op_class", request->channel_id.op_class, i, "Operating class");
+		GET_UINT8("-channel_num", request->channel_id.channel_num, i, "Radio channel number");
+    		GET_INT("-time_slot", request->time_slot, i, "The time slot in which alternating access is requested");
+    		GET_UINT8("-immediate_access", request->immediate_access, i, "Number of sync intervals to immediately remain on the selected channel before starting channel switching schedule");
+    		GET_INT("-wait_type", wait.wait_type, i, "0 - wait internal, 1 - wait forever");
+		GET_INT("-wait_usec", wait.wait_usec, i, "number of cycle wait");
+ 	 } 
+	
+	if ( v2x_service != NULL ) {
+      		cli_print ( cli, "NOTE : Local service is active" );
+    	}
+
+	rc = v2x_dot4_channel_start(v2x_service,request,&wait);
+
+	if(rc > 0){
+		cli_print ( cli, "ERROR : %u - %s\n", rc, atlk_rc_to_str(rc) );
+	}
+	else{
+		cli_print ( cli, "PASS : %u\n", rc);
+	}
+	return rc;
+
+}
+
+int cli_test_v2x_link_dot4_channel_end( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+	(void) command;
+	(void) argv;
+  	(void) argc;
+
+
+	v2x_dot4_channel_end_request_t *request = NULL;
+	atlk_wait_t wait;
+//	int wait_int = 0;
+	int i = 0;
+	atlk_rc_t rc = ATLK_OK;
+
+	request = (v2x_dot4_channel_end_request_t *) malloc(sizeof(v2x_dot4_channel_end_request_t));
+
+	IS_HELP_ARG("link api_test dot4_channel_end [-if_index 0-2|inv_data] [-op_class 1|2|3|4|inv_data] [-channel_num 0-255|inv_data] [-wait_type 0|1] [-wait_usec 0-0xffffffff]");
+
+  	CHECK_NUM_ARGS // make sure all parameter are there 
+
+  	for (i = 0; i < argc; i += 2) {
+    		GET_UINT8("-if_index", request->if_index , i, "V2X physical interface index on which access is no longer required");
+    		GET_INT("-op_class", request->channel_id.op_class, i, "Operating class");
+		GET_UINT8("-channel_num", request->channel_id.channel_num, i, "Radio channel number");
+		GET_INT("-wait_type", wait.wait_type, i, "0 - wait internal, 1 - wait forever");
+		GET_INT("-wait_usec", wait.wait_usec, i, "number of cycle wait");
+ 	 } 
+
+//	wait = (atlk_wait_t *)wait_int;
+
+	rc = v2x_dot4_channel_end(v2x_service,request,&wait);
+
+	if(rc > 0){
+		cli_print ( cli, "ERROR : %u - %s\n", rc, atlk_rc_to_str(rc) );
+	}
+	else{
+		cli_print ( cli, "PASS : %u\n", rc);
+	}
+	return rc;
+	
+}
+
+
+//atlk_rc_t atlk_must_check
+//v2x_dot4_channel_end_receive(v2x_service_t *service,
+//                             v2x_dot4_channel_end_indication_t *indication,
+//                             const atlk_wait_t *wait);
+
+
+int cli_test_v2x_link_dot4_channel_end_receive( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+	(void) command;
+
+	v2x_dot4_channel_end_indication_t *indication= NULL;
+	atlk_wait_t wait;
+//	int wait_int = 0;
+	int i = 0;
+	atlk_rc_t rc = ATLK_OK;
+
+	indication = (v2x_dot4_channel_end_indication_t *)malloc(sizeof(v2x_dot4_channel_end_indication_t));
+
+	IS_HELP_ARG("link pai_test dot4_channel_end_receive [-if_index 0-2|inv_data] [-op_class 1|2|3|4|inv_data] [-channel_num 0-255|inv_data] [-reason 0|1|inv_data]  [-wait_type 0|1] [-wait_usec 0-0xffffffff]");
+
+  	CHECK_NUM_ARGS // make sure all parameter are there 
+
+
+  	for (i = 0; i < argc; i += 2) {
+    		GET_UINT8("-if_index", indication->if_index , i, "V2X physical interface index on which access to channel is requested");
+    		GET_INT("-op_class", indication->channel_id.op_class, i, "Operating class");
+		GET_UINT8("-channel_num", indication->channel_id.channel_num, i, "Radio channel number");
+		GET_INT("-reason", indication->reason, i, "reason");
+		GET_INT("-wait_type", wait.wait_type, i, "0 - wait internal, 1 - wait forever");
+		GET_INT("-wait_usec", wait.wait_usec, i, "number of cycle wait");
+ 	 } 
+
+//	wait = (atlk_wait_t *)wait_int;
+
+	rc = v2x_dot4_channel_end_receive(v2x_service,indication,&wait);
+
+	if(rc > 0){
+		cli_print ( cli, "ERROR : %u - %s\n", rc, atlk_rc_to_str(rc) );
+	}
+	else{
+		cli_print ( cli, "PASS : %u\n", rc);
+	}
+	return rc;
+	
+}
+
+/*
+int cli_test_v2x_link_netif_profile_set( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+	(void) command;
+
+	int netif_index = 0;
+	v2x_netif_profile_t profile;
+	int i = 0;
+	atlk_rc_t rc = ATLK_OK;
+
+//	profile = (v2x_netif_profile_t *) malloc (sizeof(v2x_netif_profile_t));
+
+	IS_HELP_ARG("link netif_profile set [-netif_index 0-0xffff_ffff|inv_data] [-if_index 0-2|inv_data] [-op_class 1|2|3|4|inv_data] [-channel_num 0-255|inv_data] [-datarate 0|6|9|12|18|24|36|48|54|72|96|108|inv_data] [-power_dbm8 0-255|inv_data]");
+
+  	CHECK_NUM_ARGS // make sure all parameter are there
+
+	for (i = 0; i < argc; i += 2) {
+		GET_INT("-netif_index", netif_index , i, "netif_index Network interface index");
+    		GET_UINT8("-if_index", profile.if_index , i, " V2X physical interface index to attach to");
+    		GET_INT("-op_class", profile.channel_id.op_class, i, "Operating class");
+		GET_UINT8("-channel_num", profile.channel_id.channel_num, i, "Radio channel number");
+		GET_INT("-datarate",profile.datarate , i, "Transmission data rate for outgoing packets");
+		GET_INT("-power_dbm8",profile.power_dbm8 , i, "Transmission power level for outgoing packets");
+	 } 
+
+
+	rc = v2x_netif_profile_set(v2x_service,netif_index,&profile);
+
+	if (atlk_error(rc)) {
+	      	cli_print ( cli, "ERROR :  %s\n", atlk_rc_to_str(rc) );
+    	  	return atlk_error(rc);
+  	  }
+	else {
+		return rc;
+	}	
+}
+*/
+int cli_test_v2x_link_send( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+	(void) command;
+
+	char buf[msg_size_max]; //data_ptr
+	int msg_count = 0;
+	size_t size = 1 + snprintf(buf, sizeof(buf), msg_fmt, msg_count);
+	v2x_send_params_t params = V2X_SEND_PARAMS_INIT;
+	atlk_wait_t wait;
+	//int wait_int = 0;
+
+	int i;
+	int j;
+	atlk_rc_t rc = ATLK_OK;
+
+	user_context *myctx = (user_context *) cli_get_context(cli);
+
+	IS_HELP_ARG("link api_test send [-source_address] [-dest_address][-user_priority][-op_class 1|2|3|4|inv_data] [-channel_num 0-255|inv_data]");
+
+	CHECK_NUM_ARGS // make sure all parameter are there
+
+	for (i = 0; i < argc; i += 2) {
+		for(j=0;j<6;j++)
+		{
+			GET_UINT8("-source_address",params.source_address.octets[j] , i, "Source MAC address ");//eui48_t
+		}
+		for(j=0;j<6;j++)
+		{
+			GET_UINT8("-dest_address",params.dest_address.octets[j] , i, "Destination MAC address ");//eui48_t
+		}
+		GET_INT("-user_priority",params.user_priority , i, "MAC User Priority "); //int8_t
+		GET_INT("-op_class", params.channel_id.op_class, i, "Operating class");
+		GET_UINT8("-channel_num", params.channel_id.channel_num, i, "Radio channel number");
+		GET_INT("-datarate",params.datarate , i, "Transmission data rate for outgoing packets");
+		GET_INT("-power_dbm8",params.power_dbm8 , i, "Transmission power level for outgoing packets");
+		GET_UINT16("-expiry_time_ms",params.expiry_time_ms , i, " Expiration time in milliseconds");
+		GET_INT("-wait_type", wait.wait_type, i, "0 - wait internal, 1 - wait forever");
+		GET_INT("-wait_usec", wait.wait_usec, i, "number of cycle wait");			
+	 }
+ 
+	rc = v2x_send(myctx->v2x_socket, buf, size, &params, &wait);
+
+	if(rc > 0){
+		cli_print ( cli, "ERROR : %u - %s\n", rc, atlk_rc_to_str(rc) );
+	}
+	else{
+		cli_print ( cli, "PASS : %u\n", rc);
+	}
+	return rc;
+	
+}
+
+int cli_test_v2x_link_receive( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+		(void) command;
+
+	user_context *myctx = (user_context *) cli_get_context(cli);
+	char buf[msg_size_max]; //data_ptr
+	int msg_count = 0;
+	size_t size = 1 + snprintf(buf, sizeof(buf), msg_fmt, msg_count);
+	size_t *data_size_ptr;
+	v2x_receive_params_t params = V2X_RECEIVE_PARAMS_INIT;
+//	atlk_wait_t *wait = NULL;
+
+//	v2x_socket_config_t link_sk_params = V2X_SOCKET_CONFIG_INIT;
+	int i;
+	atlk_rc_t rc = ATLK_OK;
+	int data_size = 0;
+
+	IS_HELP_ARG("link api_test receive  [-data_size 0|1 - valid|inv_data]  [-wait_type 0|1] [-wait_usec 0-0xffffffff]");
+
+	CHECK_NUM_ARGS // make sure all parameter are there
+
+	for (i = 0; i < argc; i += 2) {
+		GET_INT("-data_size", data_size, i, " ");
+		if(data_size) size = 8;
+//		GET_INT("-wait", wait, i, "number of cycle wait");			
+	 }
+
+ 	data_size_ptr = &size;
+
+	//rc = v2x_socket_create(v2x_service, &v2x_socket, &link_sk_params);
+
+	rc = v2x_receive(myctx->v2x_socket, buf,data_size_ptr , &params, NULL);
+
+	if(rc > 0){
+		cli_print ( cli, "ERROR : %u - %s\n", rc, atlk_rc_to_str(rc) );
+	}
+	else{
+		cli_print ( cli, "PASS : %u\n", rc);
+	}
+	return rc;	
+
+}
+
+
+int cli_test_v2x_link_socket_create( struct cli_def *cli, const char *command, char *argv[], int argc ) 
+{
+	v2x_socket_config_t	link_sk_params = V2X_SOCKET_CONFIG_INIT;
+
+  	int32_t               i     = 0;
+  	atlk_rc_t             rc    = ATLK_OK;
+  	char                  str_data[256] = "";
+  
+  /* get user context */
+ 	 user_context *myctx = (user_context *) cli_get_context(cli);
+  	(void) command;
+  
+  	IS_HELP_ARG("link api_test socket_create -if_idx 1|2 [-frame_type data|vsa] [-protocol_id 0xXXXX|0xXXXXXXXXXX]")
+
+  	CHECK_NUM_ARGS /* make sure all parameter are there */
+  
+  	GET_INT("-if_idx", link_sk_params.if_index, i, "Specify interface index");
+
+  
+  	for ( i = 2 ; i < argc; i += 2 ) {
+  
+    		GET_STRING("-frame_type", str_data, i, "Specify frame type");
+    		if ( strlen(str_data) ) {
+      			if ( strcmp( (char*) str_data,  "data") == 0 ) {
+        			link_sk_params.protocol.frame_type = V2X_FRAME_TYPE_DATA;
+      			} 
+      			else if ( strcmp( (char*) str_data, "vsa") == 0 ) {
+        			link_sk_params.protocol.frame_type = V2X_FRAME_TYPE_VSA;
+      			} 
+      			else if ( strcmp( (char*) str_data, "err") == 0 ) {
+        			link_sk_params.protocol.frame_type = 231;
+      			}
+      			else {
+        			link_sk_params.protocol.frame_type = V2X_FRAME_TYPE_DATA;
+      			} 
+    		}
+    
+		if ( (argv[i] != NULL) && (strcmp(argv[i], "-protocol_id") == 0) ) {           
+			unsigned int value = 0;                           
+      			int rc = 0;                               
+      			int par_idx = (i+1);                          
+      			if (!argv[par_idx] && !&argv[par_idx]) {          
+          			cli_print(cli, "ERROR : Specify the socket protocol id");                   
+          //return CLI_OK;                                
+      			}                                                 
+      			rc = sscanf(argv[par_idx], "%x", &value);              
+      			if ( rc > 0 ) {
+        			link_sk_params.protocol.protocol_id = value;                                   
+      			} 
+      			else { 
+        			cli_print( cli, "ERROR : Processed parameter %s, value %x failed" , "-protocol_id" , value );
+     			}
+    		}                                                   \
+  	}
+
+	rc = v2x_socket_create(v2x_service, &myctx->v2x_socket, &link_sk_params);
+
+	if(rc > 0){
+		cli_print ( cli, "ERROR : %u - %s\n", rc, atlk_rc_to_str(rc) );
+	}
+	else{
+		cli_print ( cli, "PASS : %u\n", rc);
+	}
+	return rc;
+}
+
+#ifdef __linux__
+int cli_test_v2x_link_service_get (struct cli_def *cli, const char *command, char *argv[], int argc) // chrub
+{
+
+//user_context *myctx = (user_context *) cli_get_context(cli);
+
+  (void) command;
+  (void) argv;
+  (void) argc;
+
+	atlk_rc_t             rc    = ATLK_OK;
+	//v2x_service_t *pptr = NULL;
+	
+	//pptr = (v2x_service_t *)malloc(sizeof(v2x_service_t));
+
+	IS_HELP_ARG("link api_test service_get")
+	CHECK_NUM_ARGS // make sure all parameter are there 
+	
+	//rc = v2x_default_service_get(&v2x_service);
+ 	//atlk_rc_t rc = v2x_default_service_get(&v2x_service);
+	//	  if (atlk_error(rc)) {
+	//      cli_print ( cli, "ERROR : v2x_hw_service_get: %s\n", atlk_rc_to_str(rc) );
+    	//  return atlk_error(rc);
+  	 // }
+
+	// Create the remote V2X service 
+		rc = v2x_remote_service_create( get_active_cli_transport(), NULL, &v2x_service);
+		if (atlk_error(rc)) {
+			cli_print( cli, "Remote V2X service create: %s\n", atlk_rc_to_str(rc));
+			return atlk_error(rc);
+		}
+
+	if(rc > 0){
+		cli_print ( cli, "ERROR : %u - %s\n", rc, atlk_rc_to_str(rc) );
+	}
+	else{
+		cli_print ( cli, "PASS : %u\n", rc);
+	}
+	return rc;
+			
+}
+#endif
+
+
+/*
+int cli_test_v2x_link_sample_subscriber_create( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+	(void) command;
+
+	v2x_sample_subscriber_t *subscriber_ptr = NULL;
+	v2x_sample_subscriber_config_t config = V2X_SAMPLE_SUBSCRIBER_CONFIG_INIT;
+
+	atlk_rc_t rc = ATLK_OK;
+
+	int i;
+
+//	config = (v2x_sample_subscriber_config_t *)malloc(sizeof(v2x_sample_subscriber_config_t));
+//	subscriber_ptr = (v2x_sample_subscriber_t **)malloc(sizeof(v2x_sample_subscriber_t));
+
+	IS_HELP_ARG("link api_test sample_subscriber_create [-if_index 0-2|inv_data] [-type 0|1|inv_data]");
+
+	CHECK_NUM_ARGS // make sure all parameter are there
+
+	for (i = 0; i < argc; i += 2) 
+	{
+		GET_UINT8("-if_index", config.if_index , i, " Ingress/egress physical interface index");
+		GET_INT("-type",config.type , i, "Subscription sample type");	
+	}
+
+	if ( v2x_service != NULL ) {
+      		cli_print ( cli, "NOTE : Local service is active" );
+    	}
+
+	rc = v2x_sample_subscriber_create(v2x_service,&subscriber_ptr,&config);
+
+	if (rc > 0) {
+	      	cli_print ( cli, "ERROR :  %u - %s\n",rc, atlk_rc_to_str(rc) );
+    	  	return atlk_error(rc);
+  	  }
+	else {
+		cli_print ( cli, "PASS :  %u - %s\n",rc, atlk_rc_to_str(rc) );
+		return rc;
+	}
+}
+
+//atlk_rc_t
+//v2x_sample_subscriber_delete(v2x_sample_subscriber_t *subscriber);
+
+int cli_test_v2x_link_sample_subscriber_delete( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+	(void) command;
+
+//	v2x_sample_subscriber_t *subscriber_ptr = NULL;
+//	v2x_sample_subscriber_config_t config;
+
+//	atlk_rc_t rc = ATLK_OK;
+
+//	int i;
+
+
+	v2x_sample_subscriber_t *subscriber = NULL;
+
+	atlk_rc_t rc = ATLK_OK;
+
+	IS_HELP_ARG("link api_test sample_subscriber_delete ");
+
+	CHECK_NUM_ARGS // make sure all parameter are there
+
+//	for (i = 0; i < argc; i += 2) 
+//	{
+//		GET_INT("-if_index",subscriber->if_index , i, "");
+//	}
+
+	rc = v2x_sample_subscriber_delete(subscriber);
+
+	if (atlk_error(rc)) {
+	      	cli_print ( cli, "ERROR :  %s\n", atlk_rc_to_str(rc) );
+    	  	return atlk_error(rc);
+  	  }
+	else {
+		return rc;
+	}
+}
+
+int cli_test_v2x_link_sample_int32_receive( struct cli_def *cli, const char *command, char *argv[], int argc ) //chrub
+{
+	(void) command;
+	(void) argv;
+  	(void) argc;
+	cli_print ( cli, "a" );
+	return CLI_OK;
+}
+*/
